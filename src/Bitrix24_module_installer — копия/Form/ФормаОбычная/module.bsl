
Процедура ПолучитьСлужебныеДанныеДляСинхронизации()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	СлужебныеДанные = Новый Структура;
	СлужебныеДанные.Вставить("ВерсияПлатформы1С"			, СистемнаяИнформация.ВерсияПриложения);
	СлужебныеДанные.Вставить("НазваниеПрикладногоРешения"	, Метаданные.Синоним);
	СлужебныеДанные.Вставить("ИмяПрикладногоРешения"		, Метаданные.Имя);
	СлужебныеДанные.Вставить("ВерсияПрикладногоРешения"		, Метаданные.Версия);
	СлужебныеДанные.Вставить("ХешСумма"						, "");	
	
	Если Метаданные.ОбщиеМодули.Найти("Б24_ОбщегоНазначенияСервер") <> Неопределено тогда
		СлужебныеДанные.Вставить("ВерсияМодуляСинхронизации", Справочники.Б24_НастройкиСинхронизацииСБитрикс24.Версия());
		СлужебныеДанные.Вставить("МодульПервогоПоколения"	, Ложь);	
	ИначеЕсли Метаданные.Обработки.Найти("Б24_НастройкаОбменаСПорталом") <> Неопределено тогда
		СлужебныеДанные.Вставить("ВерсияМодуляСинхронизации", Обработки.Б24_НастройкаОбменаСПорталом.Версия());
		СлужебныеДанные.Вставить("МодульПервогоПоколения"	, Истина);	
	Иначе
		СлужебныеДанные.Вставить("ВерсияМодуляСинхронизации", "0.0.0.0");
		СлужебныеДанные.Вставить("МодульПервогоПоколения"	, Истина);	
	КонецЕсли;
	
	ДанныеОМодуле = Новый Структура;
	ДанныеОМодуле.Вставить("ИдПрикладногоРешения"		, "1C_Syn");
	ДанныеОМодуле.Вставить("ЭтоРасширение" 				, Ложь);
	ДанныеОМодуле.Вставить("МинимальныйРелиз" 			, "");
	ДанныеОМодуле.Вставить("МодульНеОпределен" 			, Ложь);
	ДанныеОМодуле.Вставить("СсылкаНаУстановленныйМодуль", "");
	ДанныеОМодуле.Вставить("МодульДоработан" 			, Ложь);
	ДанныеОМодуле.Вставить("ИдСтраны" 					, "");
	ДанныеОМодуле.Вставить("ИдМодуля" 					, "");
	
	Если СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеНебольшойФирмой" тогда
		ИдСтраны 		= "RU";
		ИдМодуля 		= "UNF_16";
		ДанныеОМодуле.ЭтоРасширение = Истина;
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеТорговлей" тогда
		ИдСтраны 		= "RU";
		Если СлужебныеДанные.НазваниеПрикладногоРешения = "Управление торговлей, редакция 10.3" тогда
			ИдМодуля 		= "UT_10";
		Иначе
			ИдМодуля 		= "UT_11";
			ДанныеОМодуле.ЭтоРасширение = Истина;
		КонецЕсли;
		
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "БухгалтерияПредприятия" тогда
		ИдСтраны 		= "RU";
		ИдМодуля 		= "BP_3";
		ДанныеОМодуле.ЭтоРасширение = Истина;
		
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "КомплекснаяАвтоматизация" тогда
		ИдСтраны 		= "RU";
		
		Если СлужебныеДанные.НазваниеПрикладногоРешения = "Комплексная автоматизация, редакция 1.1" тогда
			ИдМодуля 		= "UT_10";
			ДанныеОМодуле.МинимальныйРелиз = "";
		Иначе
			ИдМодуля 		= "UT_11";
			ДанныеОМодуле.МинимальныйРелиз = "2.4.6.1";
			ДанныеОМодуле.ЭтоРасширение = Истина;
		КонецЕсли;
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеПроизводственнымПредприятием" тогда
		ИдСтраны 		= "RU";
		ИдМодуля 		= "UT_10";
		ДанныеОМодуле.МинимальныйРелиз = "";
		
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеПредприятием" тогда
		ИдСтраны 		= "RU";
		ИдМодуля 		= "UT_11";
		ДанныеОМодуле.МинимальныйРелиз = "2.4.6.1";
		ДанныеОМодуле.ЭтоРасширение = Истина;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеНебольшойФирмойДляБеларуси" тогда
		ИдСтраны 		= "BY";
		ИдМодуля 		= "UNF_16";
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеТорговлейДляБеларуси" тогда
		ИдСтраны 		= "BY";
		ИдМодуля 		= "UT_3";
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "БухгалтерияДляБеларуси" тогда
		ИдСтраны 		= "BY";
		ИдМодуля 		= "BP_2";
//////////////////////////////////////////////////////////////////////////////////////////////////////////////		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеТорговлейДляКазахстана" тогда
		ИдСтраны 		= "KZ";
		ИдМодуля 		= "UT_3";
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеТорговымПредприятиемДляКазахстана" тогда
		ИдСтраны 		= "KZ";
		ИдМодуля 		= "UTP_2";
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "БухгалтерияДляКазахстана" тогда
		ИдСтраны 		= "KZ";
		ИдМодуля 		= "BP_3";
//////////////////////////////////////////////////////////////////////////////////////////////////////////////		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////			
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеТорговлейДляУкраины" тогда
		ИдСтраны = "UA";
		Если СлужебныеДанные.НазваниеПрикладногоРешения = "Управление торговлей для Украины, редакция 2.3" тогда
			ИдМодуля 		= "UT_23";
		Иначе
			ИдМодуля 		= "UT_3";
		КонецЕсли;
		
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеТорговымПредприятиемДляУкраины" тогда
		ИдСтраны = "UA";
		ИдМодуля = "UTP_12";
		
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "БухгалтерияДляУкраины" тогда
		ИдСтраны = "UA";
		ИдМодуля = "BP_2";
	ИначеЕсли СлужебныеДанные.ИмяПрикладногоРешения = "УправлениеПроизводственнымПредприятиемДляУкраины" тогда
		ИдСтраны 		= "UA";
		ИдМодуля 		= "UPP_13";
		ДанныеОМодуле.МинимальныйРелиз = "";
//////////////////////////////////////////////////////////////////////////////////////////////////////////////		
//////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	Иначе
		ИдСтраны = "RU";
		ИдМодуля = "UT_11";
		ДанныеОМодуле.МодульНеОпределен = Истина;
	КонецЕсли;
	
	ДанныеОМодуле.ИдСтраны = ИдСтраны;
	ДанныеОМодуле.ИдМодуля = ИдМодуля;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПолучитьСлужебныеДанныеДляСинхронизации();	
	
	ИнформацияОМодулях = ПолучитьИнформациюОМодулях();

	Если ИнформацияОМодулях = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(СлужебныеДанные.ВерсияМодуляСинхронизации,1)= "1" тогда      
		СлужебныеДанные.ВерсияМодуляСинхронизации = СлужебныеДанные.ВерсияМодуляСинхронизации + ".0.0";
	КонецЕсли;
	
	Для каждого ТекМодуль из ИнформацияОМодулях Цикл
		
		ВерсияМодуля = ТекМодуль.Получить("VersionModule");
		ВерсияМодуля = СокрЛП(СтрЗаменить(ВерсияМодуля, "BETA",""));
		
		Если ДанныеОМодуле.ИдСтраны = "UA" тогда
			СсылкаНаМодуль = "https://1c.1c-bitrix.ru/"+Строка(ТекМодуль.Получить("ModuleFile"));
		Иначе
			СсылкаНаМодуль = "https://1c.1c-bitrix.ru/"+Строка(ТекМодуль.Получить("ModuleFile"));
		КонецЕсли;
		
		Если Лев(ВерсияМодуля,1)= "1" тогда      
			ВерсияМодуля = ВерсияМодуля + ".0.0";
		КонецЕсли;
		
		Если СравнитьВерсии(СлужебныеДанные.ВерсияМодуляСинхронизации, ВерсияМодуля) > 0 тогда
			Продолжить;	
		ИначеЕсли СравнитьВерсии(СлужебныеДанные.ВерсияМодуляСинхронизации, ВерсияМодуля) = 0 тогда
			
			ДанныеОМодуле.СсылкаНаУстановленныйМодуль	= СсылкаНаМодуль;
			
			Если (Строка(СлужебныеДанные.ХешСумма) <> ТекМодуль.Получить("Hash")) И ЗначениеЗаполнено(Строка(СлужебныеДанные.ХешСумма)) И ЗначениеЗаполнено(ТекМодуль.Получить("Hash")) тогда
				//ДанныеОМодуле.МодульДоработан = Истина;	    - пока не используем
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = УставливаемыеМодули.Добавить();
			
			НоваяСтрока.ВерсияМодуля			= ВерсияМодуля;
			НоваяСтрока.ДатаВыхода 				= ТекМодуль.Получить("ReleaseDate");
			НоваяСтрока.РелизКонфигурации 		= ТекМодуль.Получить("VersionAppSolution");
			НоваяСтрока.Ссылка 					= СсылкаНаМодуль;
			
			Если ТекМодуль.Получить("LOG") <> Ложь тогда
				НоваяСтрока.ИсторияИзменений 		= ТекМодуль.Получить("LOG").Получить("TEXT");
			КонецЕсли;
			
			Если ТекМодуль.Получить("CriticalMessage") <> Ложь тогда
				НоваяСтрока.КритическаяИнформация 	= ТекМодуль.Получить("CriticalMessage").Получить("TEXT");
			КонецЕсли;
			
			НоваяСтрока.МинимальныйРелиз 		= ТекМодуль.Получить("MinimalVersionAppSolution");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Метаданные.РегистрыСведений.Найти("Б24_ИдентификаторыОбъектов") <> Неопределено И Лев(СлужебныеДанные.ВерсияМодуляСинхронизации,1)= "2" тогда
		
		Если Метаданные.Константы.Найти("Б_ОбщиеНастройки") <> Неопределено тогда
			ЭлементыФормы.ПереносДанных.Видимость = Истина;
		Иначе
			ЭлементыФормы.ПереносДанных.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ПереносДанных.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ (СлужебныеДанные.ВерсияМодуляСинхронизации = "" ИЛИ СлужебныеДанные.ВерсияМодуляСинхронизации = "0.0.0.0") тогда
		ЭлементыФормы.ТекущаяВерсия.Заголовок 		= СлужебныеДанные.ВерсияМодуляСинхронизации;
	Иначе
		// БВ
		ЭлементыФормы.ТекущаяВерсия.Заголовок 		= Нстр("ru = 'Не установлен'; uk = 'Не встановлено'");
		//
	КонецЕсли;
	
	Если ДанныеОМодуле.МодульНеОпределен тогда
		ЭлементыФормы.ГруппаСтраницы.ТекущаяСтраница = ЭлементыФормы.ГруппаСтраницы.Страницы.СтраницаНетМодуля;
		ЭлементыФормы.НаписатьПожелание.КнопкаПоУмолчанию = Истина;
		ЭтаФорма.Высота = 280;	
	Иначе
		ЭлементыФормы.ГруппаСтраницы.ТекущаяСтраница = ЭлементыФормы.ГруппаСтраницы.Страницы.СтраницаЕстьМодуль;
		
		КоличествоУстанавливаемыхМодулей = УставливаемыеМодули.Количество(); 
		
		Если КоличествоУстанавливаемыхМодулей > 0 тогда
			
			Если ЗначениеЗаполнено(ДанныеОМодуле.МинимальныйРелиз) тогда
				Если СравнитьВерсии(ДанныеОМодуле.МинимальныйРелиз, СлужебныеДанные.ВерсияПрикладногоРешения)>0 тогда
					
					ЭлементыФормы.ИнфоОЗапретеУстановки.Видимость = Истина;
					//БВ
					ЭлементыФормы.ИнфоОЗапретеУстановки.Заголовок = Нстр("ru = 'Релиз конфигурации меньше требуемой. Требуется не ниже:'; uk = 'Реліз конфігурації менше, ніж потрібен. Потрібен не нище:'") + ДанныеОМодуле.МинимальныйРелиз;
					//
					//Элементы.ГруппаУстановка.Доступность = Ложь;	
				КонецЕсли;
			Иначе
				Если СравнитьВерсии(УставливаемыеМодули[0].МинимальныйРелиз, СлужебныеДанные.ВерсияПрикладногоРешения)>0 тогда
					
					ЭлементыФормы.ИнфоОЗапретеУстановки.Видимость = Истина;
					//БВ
					ЭлементыФормы.ИнфоОЗапретеУстановки.Заголовок = Нстр("ru = 'Релиз конфигурации меньше требуемой. Требуется не ниже:'; uk = 'Реліз конфігурації менше, ніж потрібен. Потрібен не нище:'") + УставливаемыеМодули[0].МинимальныйРелиз;
					//
					//ЭлементыФормы.УстановитьМодуль.Доступность = Ложь;	
				КонецЕсли;
			КонецЕсли;
			
			Если СравнитьВерсии("8.3.8.1", СлужебныеДанные.ВерсияПлатформы1С)>0 тогда
				
				ЭлементыФормы.ИнфоОЗапретеУстановки.Видимость = Истина;
				// БВ
				ЭлементыФормы.ИнфоОЗапретеУстановки.Заголовок = Нстр("ru = 'Требуется версия платформы не ниже 8.3.8'; uk = 'Потрібна версія платформи не нище, ніж 8.3.8'");
				//
				ЭлементыФормы.УстановитьМодуль.Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыФормы.УставливаемыеМодули.Видимость = НЕ КоличествоУстанавливаемыхМодулей = 0;
		
		Если ЗначениеЗаполнено(ДанныеОМодуле.СсылкаНаУстановленныйМодуль) тогда 
			
			Если КоличествоУстанавливаемыхМодулей = 0 тогда
				ЭлементыФормы.НоваяВерсияИнфо.Видимость 	= Истина;
				ЭлементыФормы.НоваяВерсия.Видимость 		= Истина;
				ЭлементыФормы.НоваяВерсия.Заголовок 		= СлужебныеДанные.ВерсияМодуляСинхронизации;
				ЭлементыФормы.ИнфоВажноВерсии.Видимость 	= Ложь;
				ЭлементыФормы.ПропущенныеВерсииМодулей.Видимость = Ложь;
				// БВ
				ЭлементыФормы.УстановитьМодуль.Заголовок = Нстр("ru = 'Заново скачать модуль'; uk = 'Знову завантажити модуль'");
				//
				ЭтаФорма.Высота = 280;	
			Иначе
				ЭлементыФормы.НоваяВерсияИнфо.Видимость 	= Истина;
				ЭлементыФормы.НоваяВерсия.Видимость 		= Истина;
				ЭлементыФормы.НоваяВерсия.Заголовок 		= УставливаемыеМодули[0].ВерсияМодуля;
				
				ЭлементыФормы.ИнфоВажноВерсии.Видимость 	= Истина;
				ЭлементыФормы.ИнфоВажноВерсии.Заголовок 	= УставливаемыеМодули[0].КритическаяИнформация;
				// БВ
				ЭлементыФормы.УстановитьМодуль.Заголовок = Нстр("ru = 'Скачать новую версию модуля'; uk = 'Завантажити нову версію модуля'");
				//
			КонецЕсли;
		Иначе
			Если КоличествоУстанавливаемыхМодулей > 0 тогда
				ЭлементыФормы.НоваяВерсияИнфо.Видимость 	= Истина;
				ЭлементыФормы.НоваяВерсия.Видимость 		= Истина;
				ЭлементыФормы.НоваяВерсия.Заголовок 		= УставливаемыеМодули[0].ВерсияМодуля;
				
				ЭлементыФормы.ИнфоВажноВерсии.Видимость 	= Истина;
				ЭлементыФормы.ИнфоВажноВерсии.Заголовок 	= УставливаемыеМодули[0].КритическаяИнформация;
			Иначе
				ЭлементыФормы.УстановитьМодуль.Видимость 		 = Ложь;
				ЭлементыФормы.ПропущенныеВерсииМодулей.Видимость = Ложь;
				ЭлементыФормы.ИнфоВажноВерсии.Видимость 		 = Ложь;
				ЭлементыФормы.НоваяВерсияИнфо.Видимость 		 = Ложь;
				//ЭлементыФормы.ПереносДанных.Видимость 			= Ложь;
				ЭлементыФормы.ИнфоОЗапретеУстановки.Видимость 	 = Истина;
				// БВ
				ЭлементыФормы.ИнфоОЗапретеУстановки.Заголовок 	 = Нстр("ru = 'Не удалось определить более новую версию модуля синхронизации с Битрикс24'"+
																	   ";uk = 'Неможливо визначити новішу версію модуля синхронізації з Бітрікс24'");
				//
				ЭлементыФормы.ИнфоОЗапретеУстановки.Верх 		 = 35;
				
				ЭтаФорма.Высота = 280;	
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	// БВ
	Диалог.Заголовок = НСтр("ru = 'Укажите где будет сохранен модуль синхронизации'; uk = 'Вкажіть де буде збережен модуль синхронізації'");
	Диалог.ПолноеИмяФайла   = Нстр("ru = 'Модуль синхронизации с Битрикс24'; uk = 'Модуль синхронізації з Бітрікс24'");
	//
	Диалог.Фильтр = "Архив (*.zip)|*.zip";
	
	Если Диалог.Выбрать() Тогда
		СкачатьУстановитьМодуль(Диалог.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры

Процедура СкачатьУстановитьМодуль(ИмяФайла = Неопределено)
	
	УспешнаяЗагрузка = Истина;
	
	Если УставливаемыеМодули.Количество() = 0 тогда
		СсылкаНаМодуль = ДанныеОМодуле.СсылкаНаУстановленныйМодуль; 
		Версия = СлужебныеДанные.ВерсияМодуляСинхронизации;
	Иначе
		СсылкаНаМодуль = УставливаемыеМодули[0].Ссылка; 
		Версия = УставливаемыеМодули[0].ВерсияМодуля;
	КонецЕсли;
	
	
	
	
	ИмяФайла = ?(ИмяФайла = Неопределено, ПолучитьИмяВременногоФайла("cfe"), ИмяФайла);
	
	Результат = Неопределено;
	
	НастройкиПодключения = Новый Структура;
	РазобратьАдресСайта(СсылкаНаМодуль, НастройкиПодключения);	
	
	Соединение = УстановитьСоединениеССервером(НастройкиПодключения);
	
	HTTPЗапрос = Новый HTTPЗапрос(НастройкиПодключения.АдресСкрипта);
	
	Попытка   
		Соединение.Получить(HTTPЗапрос, ИмяФайла);
	Исключение
		УспешнаяЗагрузка = Ложь;
		// БВ
		Сообщить(Нстр("ru = 'Не удалось загрузить модуль по адресу: '; uk = 'Не вдалося завантажити модуль за адресою: '") + СсылкаНаМодуль);
		//
	КонецПопытки;
	
	Если УспешнаяЗагрузка тогда
		ОтправкаАналитики(Версия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаАналитики(Версия)
	
	Результат = Неопределено;
	
	НастройкиПодключения = Новый Структура;
	РазобратьАдресСайта("https://util.1c-bitrix.ru/onec/ga_send.php", НастройкиПодключения);	
	
	Соединение = УстановитьСоединениеССервером(НастройкиПодключения);
	
	ПустойПараметр = "&LastParam=last";    //1С может резать символы, поэтому добавляем параметр, который можно спокойно резать.
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = НастройкиПодключения.АдресСкрипта;
	
	ТелоHTTPЗапроса = "q=1&module="+ЗакодироватьСтрокуСервер(ДанныеОМодуле.ИдСтраны+"_1С:Синхронизация Битрикс24")
	+"&app="+ЗакодироватьСтрокуСервер(СлужебныеДанные.НазваниеПрикладногоРешения)+"&version="+ЗакодироватьСтрокуСервер(Версия)+ ПустойПараметр;	
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type"	,"application/x-www-form-urlencoded; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Content-Length"	, Формат(СтрДлина(ТелоHTTPЗапроса), "ЧГ=0"));
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоHTTPЗапроса);
	
	Попытка   
		
		Ответ 			= Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
		ОтветСтрокой 	= Ответ.ПолучитьТелоКакСтроку();
		
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

Процедура ДекорацияНетМодуляИнфо3Нажатие(Элемент)
	ЗапуститьПриложение("https://1c.1c-bitrix.ru/intranet/download.php");
КонецПроцедуры

Процедура НаписатьПожеланиеНажатие(Элемент)

	Форма = ОбработкаОбъект.ПолучитьФорму("ФормаПожеланийОбычная");
	Форма.ОткрытьМодально();	
		
КонецПроцедуры

Процедура ДокументацияНажатие(Элемент)
	ЗапуститьПриложение("http://www.1c-bitrix.ru/download/1c/docs/1csynchronization/User manual - old.docx");
КонецПроцедуры

Процедура ДекорацияАдресДоСтраницыСкачиванияНажатие(Элемент)
		ЗапуститьПриложение("https://1c.1c-bitrix.ru/intranet/download.php");
КонецПроцедуры

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////

#Область Служебные
Функция ПолучитьИнформациюОМодулях()
	
	Результат = Неопределено;
	
	НастройкиПодключения = Новый Структура;
	РазобратьАдресСайта("https://util.1c-bitrix.ru/onec/modules_info.php", НастройкиПодключения);	
	
	Соединение = УстановитьСоединениеССервером(НастройкиПодключения);
	
	ПустойПараметр = "&LastParam=last";    //1С может резать символы, поэтому добавляем параметр, который можно спокойно резать.
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = "onec/modules_info.php";
	
	ТелоHTTPЗапроса = "q=1&module="+ДанныеОМодуле.ИдПрикладногоРешения+"&country="+ДанныеОМодуле.ИдСтраны+"&app="+ДанныеОМодуле.ИдМодуля+ ПустойПараметр;	
	
	//module - IdModule (символьный код раздела 1 уровня),
	//country - IdCountry (символьный код раздела 2 уровня),
	//app - IdAppSolution (символьный код раздела 2 уровня).	
	
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type"	,"application/x-www-form-urlencoded; charset=utf-8");
	HTTPЗапрос.Заголовки.Вставить("Content-Length"	, Формат(СтрДлина(ТелоHTTPЗапроса), "ЧГ=0"));
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоHTTPЗапроса);
	
	Попытка   
		
		Ответ 				= Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
		ОтветСтрокой 		= Ответ.ПолучитьТелоКакСтроку();
		Раскодировка 		= РаскодироватьJSON(ОтветСтрокой);
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСтрокой);
		
		ИнформацияОМодулях =  ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Результат = ИнформацияОМодулях.Получить("result").Получить("modules");
		
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции


Функция РазобратьАдресСайта(Знач АдресСайта, НастройкиПодключения) 
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	Сервер		 		 = ""; 
	Порт				 = 0;
	АдресСкрипта 		 = "";
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			
			АдресСайта = Сред(АдресСайта, 8);
			
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
			
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			
			Сервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);	
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
			
		Иначе
			
			Сервер 		 = АдресСайта;
			АдресСкрипта = "";
			
		КонецЕсли;
		
		ПозицияДвоеточия = Найти(Сервер, ":");
		ПортСтрока = "0";
		
		Если ПозицияДвоеточия > 0 Тогда
			
			СерверСПортом = Сервер;
			Сервер		  = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока 	  = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
			
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			#ЕСЛИ НЕ СЕРВЕР ТОГДА
				// БВ
				ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось получить номер порта ('; uk = 'Не вдалося отримати номер порту ('") + ПортСтрока + ")!"
				+ Символы.ПС + НСтр("ru = 'Проверьте правильность ввода адреса сайта.'; uk = 'Перевірте правильність введення адреси сайту.'"));
				//
			#ИНАЧЕ
				// БВ
				Сообщить(НСтр("ru = 'Не удалось получить номер порта ('; uk = 'Не вдалося отримати номер порту ('") + ПортСтрока + ")!"
				+ Символы.ПС + НСтр("ru = 'Проверьте правильность ввода адреса сайта.'; uk = 'Перевірте правильність введення адреси сайту.'"));
				//
			#КОНЕЦЕСЛИ
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			
			Порт = ?(ЗащищенноеСоединение, 443, 80);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер"	  				, Сервер); 
	НастройкиПодключения.Вставить("Порт"		   			, Порт);
	НастройкиПодключения.Вставить("АдресСкрипта"			, АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение"	, ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

Функция РаскодироватьJSON(URL)
	
	Результат = URL; 
	
	СписокСимволов = Новый СписокЗначений;
	СписокСимволов.Добавить("\u0430", "а");
	СписокСимволов.Добавить("\u0431", "б");
	СписокСимволов.Добавить("\u0432", "в");
	СписокСимволов.Добавить("\u0433", "г");
	СписокСимволов.Добавить("\u0434", "д");
	СписокСимволов.Добавить("\u0435", "е");
	СписокСимволов.Добавить("\u0451", "ё");
	СписокСимволов.Добавить("\u0436", "ж");
	СписокСимволов.Добавить("\u0437", "з");
	СписокСимволов.Добавить("\u0438", "и");
	СписокСимволов.Добавить("\u0439", "й");
	СписокСимволов.Добавить("\u043a", "к");
	СписокСимволов.Добавить("\u043b", "л");
	СписокСимволов.Добавить("\u043c", "м");
	СписокСимволов.Добавить("\u043d", "н");
	СписокСимволов.Добавить("\u043e", "о");
	СписокСимволов.Добавить("\u043f", "п");
	СписокСимволов.Добавить("\u0440", "р");
	СписокСимволов.Добавить("\u0441", "с");
	СписокСимволов.Добавить("\u0442", "т");
	СписокСимволов.Добавить("\u0443", "у");
	СписокСимволов.Добавить("\u0444", "ф");
	СписокСимволов.Добавить("\u0445", "х");
	СписокСимволов.Добавить("\u0446", "ц");
	СписокСимволов.Добавить("\u0447", "ч");
	СписокСимволов.Добавить("\u0448", "ш");
	СписокСимволов.Добавить("\u0448", "щ");
	СписокСимволов.Добавить("\u044a", "ъ");
	СписокСимволов.Добавить("\u044b", "ы");
	СписокСимволов.Добавить("\u044c", "ь");
	СписокСимволов.Добавить("\u044d", "э");
	СписокСимволов.Добавить("\u044e", "ю");
	СписокСимволов.Добавить("\u044f", "я");
	
	СписокСимволов.Добавить("\u0410", "А");
	СписокСимволов.Добавить("\u0411", "Б");
	СписокСимволов.Добавить("\u0412", "В");
	СписокСимволов.Добавить("\u0413", "Г");
	СписокСимволов.Добавить("\u0414", "Д");
	СписокСимволов.Добавить("\u0415", "Е");
	СписокСимволов.Добавить("\u0401", "Ё");
	СписокСимволов.Добавить("\u0416", "Ж");
	СписокСимволов.Добавить("\u0417", "З");
	СписокСимволов.Добавить("\u0418", "И");
	СписокСимволов.Добавить("\u0419", "Й");
	СписокСимволов.Добавить("\u041a", "К");
	СписокСимволов.Добавить("\u041b", "Л");
	СписокСимволов.Добавить("\u041c", "М");
	СписокСимволов.Добавить("\u041d", "Н");
	СписокСимволов.Добавить("\u041e", "О");
	СписокСимволов.Добавить("\u041f", "П");
	СписокСимволов.Добавить("\u0420", "Р");
	СписокСимволов.Добавить("\u0421", "С");
	СписокСимволов.Добавить("\u0422", "Т");
	СписокСимволов.Добавить("\u0423", "У");
	СписокСимволов.Добавить("\u0424", "Ф");
	СписокСимволов.Добавить("\u0425", "Х");
	СписокСимволов.Добавить("\u0426", "Ц");
	СписокСимволов.Добавить("\u0427", "Ч");
	СписокСимволов.Добавить("\u0428", "Ш");
	СписокСимволов.Добавить("\u0428", "Щ");
	СписокСимволов.Добавить("\u042a", "Ъ");
	СписокСимволов.Добавить("\u042b", "Ы");
	СписокСимволов.Добавить("\u042c", "Ь");
	СписокСимволов.Добавить("\u042d", "Э");
	СписокСимволов.Добавить("\u042e", "Ю");
	СписокСимволов.Добавить("\u042f", "Я");
	
	
	СписокСимволов.Добавить("\u0022", "'");
	
	СписокСимволов.Добавить("\u003E", ">");
	СписокСимволов.Добавить("\u003е", ">");
	
	СписокСимволов.Добавить("\u003C", "<");
	СписокСимволов.Добавить("\u003c", "<");
	
	Для Каждого текЭлемент из СписокСимволов Цикл
		
		Результат = СтрЗаменить(Результат,текЭлемент.Значение, текЭлемент.Представление);	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗакодироватьСтрокуСервер(ЗначениеСтроки) Экспорт
	
	Возврат КодироватьСтроку(XMLСтрока(ЗначениеСтроки), СпособКодированияСтроки.КодировкаURL, "UTF8");
	
КонецФункции

Функция УстановитьСоединениеССервером(ОбщиеНастройки)    
	
	Соединение = Неопределено;
	
	Попытка
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);   
		
		ИнтернетПрокси = ПолучитьПрокси("HTTP");
		
		Соединение = Новый HTTPСоединение(ОбщиеНастройки.Сервер, ОбщиеНастройки.Порт,,, ИнтернетПрокси, ,ssl);
		
	Исключение
		
		// БВ
		лТекстОшибки = НСтр("ru = 'Не удалось установить соединение с серовером'; uk = 'Не вдалося встановити зв'язок з сервером'") 
		+ ОбщиеНастройки.Сервер + ":" + Строка(ОбщиеНастройки.Порт) 
		+ НСтр("ru = '.Проверьте правильность токена.'; uk = '.Перевірте правильність токену.'");
		//
		Сообщить(лТекстОшибки);
		
		Соединение = Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ПолучитьПрокси(Протокол) 
	
	НастройкаПроксиСервера = Новый Соответствие;
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Ложь);
	НастройкаПроксиСервера.Вставить("Пользователь", "");
	НастройкаПроксиСервера.Вставить("Пароль", "");
	НастройкаПроксиСервера.Вставить("Порт", "");
	НастройкаПроксиСервера.Вставить("Сервер", "");
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Ложь);
	
	Возврат СформироватьПрокси(НастройкаПроксиСервера, Протокол);
	
КонецФункции

Функция СформироватьПрокси(НастройкаПроксиСервера, Протокол) 
	
	Если НастройкаПроксиСервера <> Неопределено Тогда
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		Если ИспользоватьПрокси Тогда
			Если ИспользоватьСистемныеНастройки Тогда
				// Системные настройки прокси-сервера
				Прокси = Новый ИнтернетПрокси(Истина);
			Иначе
				
				// Настройки прокси-сервера, заданные вручную
				Прокси = Новый ИнтернетПрокси;
				
				// Определение адреса и порта прокси-сервера
				ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
				ПроксиПоПротоколу = Неопределено;
				Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
					ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
				КонецЕсли;
				
				Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
					Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт);
				Иначе
					Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
				КонецЕсли;
				
				Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
				Прокси.Пользователь = НастройкаПроксиСервера["Пользователь"];
				Прокси.Пароль       = НастройкаПроксиСервера["Пароль"];
				
				АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
				Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
					Для каждого АдресИсключения Из АдресаИсключений Цикл
						Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// Не использовать прокси-сервер
			Прокси = Новый ИнтернетПрокси(Ложь);
		КонецЕсли;
	Иначе
		// Системные установки прокси-сервера
		Прокси = Неопределено;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции



Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) 
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = РазложитьСтрокуВМассивПодстрок(Строка1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
							// БВ
							НСтр("ru = 'Неправильный формат строки версии: %1'; uk = 'Невірний формат рядка версії: %1'"), СтрокаВерсии1);
							//
	КонецЕсли;
	Версия2 = РазложитьСтрокуВМассивПодстрок(Строка2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(
							// БВ
							НСтр("ru = 'Неправильный формат строки версии: %1'; uk = 'Невірний формат рядка версії: %1'"), СтрокаВерсии2);
							//
	КонецЕсли;
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Процедура ПереносДанныхНажатие(Элемент)
	
	Сообщить(Нстр("ru = 'Начало переноса данных.';uk = 'Початок перенесення даних.'"));	
	
	ОбщиеНастройки 		= Константы.Б_ОбщиеНастройки.Получить().Получить();
	НастройкиКоннектора = Константы.Б24_НастройкиКоннектора.Получить().Получить();
	НастройкиОбмена 	= Константы.Б24_НастройкиОбмена.Получить().Получить();
	
	ЕстьПользовательскоеДеревоГрупп = Ложь;				
	
	ТипыДанныхДляОбменаСПорталомСтарые = Неопределено;
	Если Метаданные.ОбщиеМодули.Найти("Б24_СинхронизацияПовтИсп") <> Неопределено тогда
		Выполнить("ТипыДанныхДляОбменаСПорталомСтарые = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();");
	КонецЕсли;
	                                                        
	ТипыДанныхДляОбменаСПорталомНовые = Неопределено;
	Если Метаданные.ОбщиеМодули.Найти("Б24_ОбщегоНазначенияПовтИсп") <> Неопределено тогда
		Выполнить("ТипыДанныхДляОбменаСПорталомНовые = Б24_СинхронизацияПовтИсп.ПолучитьТипыДанныхДляОбменаСПорталом();");
	КонецЕсли;
	
	Если ТипЗнч(ОбщиеНастройки)= Тип("Структура") тогда	
	
		Результат = Новый Структура;
		
		Если ОбщиеНастройки.Свойство("ОбрезатьИсториюОбменов") тогда
			Результат.Вставить("ОбрезатьИсториюОбменов"	 , ОбщиеНастройки.ОбрезатьИсториюОбменов);
		Иначе
			Результат.Вставить("ОбрезатьИсториюОбменов"	 , Истина);
		КонецЕсли;
		
		Если ОбщиеНастройки.Свойство("ЧислоДнейХраненияИстории") тогда
			Результат.Вставить("ЧислоДнейХраненияИстории"	 , ОбщиеНастройки.ЧислоДнейХраненияИстории);
		Иначе
			Результат.Вставить("ЧислоДнейХраненияИстории"	 , 7);
		КонецЕсли;
		
		Если ОбщиеНастройки.Свойство("РежимОтладки") тогда
			Результат.Вставить("РежимОтладки"	 , ОбщиеНастройки.РежимОтладки);
		Иначе
			Результат.Вставить("РежимОтладки"	 , Ложь);
		КонецЕсли;
		
		Попытка
			Выполнить("Б24_ОбщегоНазначенияСервер.УстановитьЗначениеВХранилищаНастроек(""Логирование"", Результат);");
		Исключение
			Сообщить(Нстр("ru = 'Требуется перезагрузить клиент 1С'; uk = 'Потрібно перезавантажити клієнт 1С'"));
			Возврат;	
		КонецПопытки;
		
	КонецЕсли;	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивТипов);
	
	НоваяНастройка = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.СоздатьЭлемент();
	НоваяНастройка.УстановитьНовыйКод();
	НоваяНастройка.Наименование = "Настройка из модуля версии 1.Х";
	НоваяНастройка.ПорядокВыполненияСинхронизации = "Сперва Битрикс24, затем 1С";
	
	Если ТипЗнч(НастройкиКоннектора)= Тип("Структура") тогда	
		Если НастройкиКоннектора.Свойство("ИдентификаторКоннектора") тогда
			НоваяНастройка.ИдентификаторИсточника = НастройкиКоннектора.ИдентификаторКоннектора;
		Иначе
			НоваяНастройка.ИдентификаторИсточника = "OneC";
		КонецЕсли;
			
		Если НастройкиКоннектора.Свойство("ТаблицаСопоставленияПользователей") тогда
			Для Каждого ТекСтрока из НастройкиКоннектора.ТаблицаСопоставленияПользователей Цикл
				НовыйПользователь = НоваяНастройка.СопоставлениеПользователей.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПользователь, ТекСтрока); 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	НоваяНастройка.КоличествоПовторенийПриОшибках = 3;
	НоваяНастройка.РасписаниеРегламентногоЗадания = Новый ХранилищеЗначения(Новый РасписаниеРегламентногоЗадания);	
	НоваяНастройка.СпособСинхронизацииДанных = "Только ручной режим";
		
	НастройкиСинхронизацииПоУмолчанию = Справочники.Б24_НастройкиСинхронизацииСБитрикс24.ПолучитьНастройкиСинхронизацииПоУмолчанию();
	
	Если ТипЗнч(НастройкиОбмена)= Тип("Структура") тогда	
		
		Если НастройкиОбмена.Свойство("СинхронизацияКонтрагентов") тогда
			НоваяНастройка.СинхронизацияКонтрагентов = НастройкиОбмена.СинхронизацияКонтрагентов;
		Иначе
			НоваяНастройка.СинхронизацияКонтрагентов = Истина;
		КонецЕсли;	
		
		Если НастройкиОбмена.Свойство("СинхронизацияТоваров") тогда
			НоваяНастройка.СинхронизацияТоваров = НастройкиОбмена.СинхронизацияТоваров;
		Иначе
			НоваяНастройка.СинхронизацияТоваров = Истина;
		КонецЕсли;	
		
		Если НастройкиОбмена.Свойство("СинхронизацияСчетов") тогда
			НоваяНастройка.СинхронизацияСчетов = НастройкиОбмена.СинхронизацияСчетов;
		Иначе
			НоваяНастройка.СинхронизацияСчетов = Истина;
		КонецЕсли;	
		
		Если НастройкиОбмена.Свойство("СинхронизацияСделок") тогда
			НоваяНастройка.СинхронизацияСделок = НастройкиОбмена.СинхронизацияСделок;
		Иначе
			НоваяНастройка.СинхронизацияСделок = Истина;
		КонецЕсли;	
		
#Область Контрагенты

		Если НастройкиОбмена.Свойство("НастройиСинхронизацииКонтрагентов") тогда
			
			НастройиСинхронизацииКонтрагентовСтарые = НастройкиОбмена.НастройиСинхронизацииКонтрагентов;
			НастройиСинхронизацииКонтрагентовНовые	= НастройкиСинхронизацииПоУмолчанию.НастройкиСинхронизацииКонтрагентов;
			
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ВыгружатьКонтрагентов") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ВыгружатьКонтрагентов") тогда
				НастройиСинхронизацииКонтрагентовНовые.ВыгружатьКонтрагентов = НастройиСинхронизацииКонтрагентовСтарые.ВыгружатьКонтрагентов;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ВыгружатьПользовательскиеПоляКомпанийИКонтактов") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ВыгружатьПользовательскиеПоляКомпанийИКонтактов") тогда
				НастройиСинхронизацииКонтрагентовНовые.ВыгружатьПользовательскиеПоляКомпанийИКонтактов = НастройиСинхронизацииКонтрагентовСтарые.ВыгружатьПользовательскиеПоляКомпанийИКонтактов;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ГруппаДляНовыхКонтрагентов") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ГруппаДляНовыхКонтрагентов") тогда
				НастройиСинхронизацииКонтрагентовНовые.ГруппаДляНовыхКонтрагентов = НастройиСинхронизацииКонтрагентовСтарые.ГруппаДляНовыхКонтрагентов;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ЗагружатьКонтрагентов") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ЗагружатьКонтрагентов") тогда
				НастройиСинхронизацииКонтрагентовНовые.ЗагружатьКонтрагентов = НастройиСинхронизацииКонтрагентовСтарые.ЗагружатьКонтрагентов;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ЗагружатьПользовательскиеПоляКомпанийИКонтактов") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ЗагружатьПользовательскиеПоляКомпанийИКонтактов") тогда
				НастройиСинхронизацииКонтрагентовНовые.ЗагружатьПользовательскиеПоляКомпанийИКонтактов = НастройиСинхронизацииКонтрагентовСтарые.ЗагружатьПользовательскиеПоляКомпанийИКонтактов;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ОбновлятьКонтрагентов") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ОбновлятьКонтрагентов") тогда
				НастройиСинхронизацииКонтрагентовНовые.ОбновлятьКонтрагентов = НастройиСинхронизацииКонтрагентовСтарые.ОбновлятьКонтрагентов;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ПорядокИдентификацииФизЛиц") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ПорядокИдентификацииФизЛиц") тогда
				НастройиСинхронизацииКонтрагентовНовые.ПорядокИдентификацииФизЛиц = НастройиСинхронизацииКонтрагентовСтарые.ПорядокИдентификацииФизЛиц;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("ПорядокИдентификацииЮрЛиц") И НастройиСинхронизацииКонтрагентовНовые.Свойство("ПорядокИдентификацииЮрЛиц") тогда
				НастройиСинхронизацииКонтрагентовНовые.ПорядокИдентификацииЮрЛиц = НастройиСинхронизацииКонтрагентовСтарые.ПорядокИдентификацииЮрЛиц;
			КонецЕсли;
				
			Если НастройиСинхронизацииКонтрагентовСтарые.Свойство("Пресеты") И НастройиСинхронизацииКонтрагентовНовые.Свойство("Пресеты") тогда
				
				Пресет = НастройиСинхронизацииКонтрагентовСтарые.Пресеты;
				
				Пресет.Колонки.Добавить("ТипКонтрагента");
				
				Для Каждого ТекПресет из Пресет Цикл
					ТекПресет.ТипКонтрагента = ТекПресет.ЮрФизЛицо;
				КонецЦикла;
				
				НастройиСинхронизацииКонтрагентовНовые.Пресеты = Пресет;
				
			КонецЕсли;
			
		КонецЕсли;	

#КонецОбласти		
		
#Область Товары

		Если НастройкиОбмена.Свойство("НастройкиСинхронизацииТоваров") тогда
			
			НастройиСинхронизацииТоваровСтарые 	= НастройкиОбмена.НастройкиСинхронизацииТоваров;
			НастройиСинхронизацииТоваровНовые	= НастройкиСинхронизацииПоУмолчанию.НастройкиСинхронизацииТоваров;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ЗагружатьТовары") И НастройиСинхронизацииТоваровНовые.Свойство("ЗагружатьТовары") тогда
				НастройиСинхронизацииТоваровНовые.ЗагружатьТовары = НастройиСинхронизацииТоваровСтарые.ЗагружатьТовары;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ВыгружатьТовары") И НастройиСинхронизацииТоваровНовые.Свойство("ВыгружатьТовары") тогда
				НастройиСинхронизацииТоваровНовые.ВыгружатьТовары = НастройиСинхронизацииТоваровСтарые.ВыгружатьТовары;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ОбновлятьТовары") И НастройиСинхронизацииТоваровНовые.Свойство("ОбновлятьТовары") тогда
				НастройиСинхронизацииТоваровНовые.ОбновлятьТовары = НастройиСинхронизацииТоваровСтарые.ОбновлятьТовары;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ЗагружатьКартинкиИФайлы") И НастройиСинхронизацииТоваровНовые.Свойство("ЗагружатьКартинкиИФайлы") тогда
				НастройиСинхронизацииТоваровНовые.ЗагружатьКартинкиИФайлы = НастройиСинхронизацииТоваровСтарые.ЗагружатьКартинкиИФайлы;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ВыгружатьКартинкиИФайлы") И НастройиСинхронизацииТоваровНовые.Свойство("ВыгружатьКартинкиИФайлы") тогда
				НастройиСинхронизацииТоваровНовые.ВыгружатьКартинкиИФайлы = НастройиСинхронизацииТоваровСтарые.ВыгружатьКартинкиИФайлы;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ВыгружатьПланируемуюДатуПоступления") И НастройиСинхронизацииТоваровНовые.Свойство("ВыгружатьПланируемуюДатуПоступления") тогда
				НастройиСинхронизацииТоваровНовые.ВыгружатьПланируемуюДатуПоступления = НастройиСинхронизацииТоваровСтарые.ВыгружатьПланируемуюДатуПоступления;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ВыгружатьШтрихкоды") И НастройиСинхронизацииТоваровНовые.Свойство("ВыгружатьШтрихкоды") тогда
				НастройиСинхронизацииТоваровНовые.ВыгружатьШтрихкоды = НастройиСинхронизацииТоваровСтарые.ВыгружатьШтрихкоды;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("Склад") И НастройиСинхронизацииТоваровНовые.Свойство("Склад") тогда
				НастройиСинхронизацииТоваровНовые.Склад = НастройиСинхронизацииТоваровСтарые.Склад;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("ТипЦены") И НастройиСинхронизацииТоваровНовые.Свойство("ТипЦены") тогда
				НастройиСинхронизацииТоваровНовые.ТипЦены = НастройиСинхронизацииТоваровСтарые.ТипЦены;
			КонецЕсли;
			
			Если НастройиСинхронизацииТоваровСтарые.Свойство("СтавкиНДС") И НастройиСинхронизацииТоваровНовые.Свойство("СтавкиНДС") тогда
				НастройиСинхронизацииТоваровНовые.СтавкиНДС = НастройиСинхронизацииТоваровСтарые.СтавкиНДС;
			КонецЕсли;
			
			
			
			Если Метаданные.ОбщиеМодули.Найти("Б24_ОбменСПорталомВызовСервера") <> Неопределено тогда
				
				Если ЕстьПользовательскоеДеревоГрупп тогда
					
					НовоеДеревоГрупп = Справочники.Б24_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
					НовоеДеревоГрупп.Товары.Загрузить(Справочники.Б24_ПользовательскиеГруппыТоваров.Б24_Инфоблок.Товары.Выгрузить());
					НовоеДеревоГрупп.Наименование = "Дерево с предыдущей версии модуля";
					НовоеДеревоГрупп.Записать();
										
					СоответствиеРодителей = Новый Соответствие;
					СоответствиеРодителей.Вставить(Справочники.Б24_ПользовательскиеГруппыТоваров.Б24_Инфоблок, НовоеДеревоГрупп.Ссылка);
					
					Выборка = Справочники.Б24_ПользовательскиеГруппыТоваров.ВыбратьИерархически(Справочники.Б24_ПользовательскиеГруппыТоваров.Б24_Инфоблок);
					
					Пока Выборка.Следующий() Цикл

						ПодчДеревоГрупп = Справочники.Б24_ПользовательскиеГруппыТоваров.СоздатьЭлемент();
						ПодчДеревоГрупп.Товары.Загрузить(Выборка.Товары.Выгрузить());
						ПодчДеревоГрупп.Наименование = Выборка.Наименование;
						
						ПодчДеревоГрупп.Родитель = СоответствиеРодителей[Выборка.Родитель];	
						
						ПодчДеревоГрупп.Записать();
						
						СоответствиеРодителей.Вставить(Выборка.Ссылка, ПодчДеревоГрупп.Ссылка);
						
					КонецЦикла;
					
					Если НастройиСинхронизацииТоваровНовые.Свойство("ДеревоГрупп") тогда
						НастройиСинхронизацииТоваровНовые.ДеревоГрупп = НовоеДеревоГрупп.Ссылка;	
					Иначе
						НастройиСинхронизацииТоваровНовые.Вставить("ДеревоГрупп", НовоеДеревоГрупп.Ссылка);	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	

#КонецОбласти		

		
#Область Сделки

		Если НастройкиОбмена.Свойство("НастройкиСинхронизацииСделок") тогда
			
			НастройиСинхронизацииСделокСтарые = НастройкиОбмена.НастройкиСинхронизацииСделок;
			НастройиСинхронизацииСделокНовые	= НастройкиСинхронизацииПоУмолчанию.НастройкиСинхронизацииСделок;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ЗагружатьСделки") И НастройиСинхронизацииСделокНовые.Свойство("ЗагружатьСделки") тогда
				НастройиСинхронизацииСделокНовые.ЗагружатьСделки = НастройиСинхронизацииСделокСтарые.ЗагружатьСделки;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ВыгружатьСделки") И НастройиСинхронизацииСделокНовые.Свойство("ВыгружатьСделки") тогда
				НастройиСинхронизацииСделокНовые.ВыгружатьСделки = НастройиСинхронизацииСделокСтарые.ВыгружатьСделки;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ЗагружатьПользовательскиеПоляСделок") И НастройиСинхронизацииСделокНовые.Свойство("ЗагружатьПользовательскиеПоляСделок") тогда
				НастройиСинхронизацииСделокНовые.ЗагружатьПользовательскиеПоляСделок = НастройиСинхронизацииСделокСтарые.ЗагружатьПользовательскиеПоляСделок;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ВыгружатьПользовательскиеПоляСделок") И НастройиСинхронизацииСделокНовые.Свойство("ВыгружатьПользовательскиеПоляСделок") тогда
				НастройиСинхронизацииСделокНовые.ВыгружатьПользовательскиеПоляСделок = НастройиСинхронизацииСделокСтарые.ВыгружатьПользовательскиеПоляСделок;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ОбновлятьСделки") И НастройиСинхронизацииСделокНовые.Свойство("ОбновлятьСделки") тогда
				НастройиСинхронизацииСделокНовые.ОбновлятьСделки = НастройиСинхронизацииСделокСтарые.ОбновлятьСделки;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("Организация") И НастройиСинхронизацииСделокНовые.Свойство("Организация") тогда
				НастройиСинхронизацииСделокНовые.Организация = НастройиСинхронизацииСделокСтарые.Организация;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("Подразделение") И НастройиСинхронизацииСделокНовые.Свойство("Подразделение") тогда
				НастройиСинхронизацииСделокНовые.Подразделение = НастройиСинхронизацииСделокСтарые.Подразделение;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("РежимЗаписиДокумента") И НастройиСинхронизацииСделокНовые.Свойство("РежимЗаписиДокумента") тогда
				НастройиСинхронизацииСделокНовые.РежимЗаписиДокумента = НастройиСинхронизацииСделокСтарые.РежимЗаписиДокумента;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ИсточникДатыДокумента") И НастройиСинхронизацииСделокНовые.Свойство("ИсточникДатыДокумента") тогда
				НастройиСинхронизацииСделокНовые.ИсточникДатыДокумента = НастройиСинхронизацииСделокСтарые.ИсточникДатыДокумента;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ИсточникНомераДокумента") И НастройиСинхронизацииСделокНовые.Свойство("ИсточникНомераДокумента") тогда
				НастройиСинхронизацииСделокНовые.ИсточникНомераДокумента = НастройиСинхронизацииСделокСтарые.ИсточникНомераДокумента;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ДатаНачалаВыгрузкиСделок") И НастройиСинхронизацииСделокНовые.Свойство("ДатаНачалаВыгрузкиСделок") тогда
				НастройиСинхронизацииСделокНовые.ДатаНачалаВыгрузкиСделок = НастройиСинхронизацииСделокСтарые.ДатаНачалаВыгрузкиСделок;
				НастройиСинхронизацииСделокНовые.ДатаНачалаЗагрузкиСделок = НастройиСинхронизацииСделокСтарые.ДатаНачалаВыгрузкиСделок;
				
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ВыгружатьСделки") И НастройиСинхронизацииСделокНовые.Свойство("ВыгружатьСделки") тогда
				НастройиСинхронизацииСделокНовые.ВыгружатьСделки = НастройиСинхронизацииСделокСтарые.ВыгружатьСделки;
			КонецЕсли;
			
			Если НастройиСинхронизацииСделокСтарые.Свойство("ИнформацияОСтатусах") тогда
				
				ИнформацияОСтатусах = НастройиСинхронизацииСделокСтарые.ИнформацияОСтатусах;				
				
				Если ТипЗнч(ИнформацияОСтатусах) = Тип("Структура") тогда
					
					ВидЗаказа = Неопределено;
					НастройиСинхронизацииСделокСтарые.Свойство("ВидЗаказа", ВидЗаказа);
					
					НаправленияСделок = Новый ТаблицаЗначений;
					НаправленияСделок.Колонки.Добавить("ИдНаправления");
					НаправленияСделок.Колонки.Добавить("Направление");
					НаправленияСделок.Колонки.Добавить("ВидЗаказа");
					
					Если ИнформацияОСтатусах.Свойство("СтатусыНаправленийЗначенийСвойств") тогда
						
						ИнформацияОСтатусах.СтатусыНаправленийЗначенийСвойств.Колонки.Добавить("НеЗагружать", ОписаниеТиповБулево);	
						ИнформацияОСтатусах.СтатусыНаправленийЗначенийСвойств.Колонки.Добавить("ВидЗаказа");
						
						Для Каждого ТекНаправления из ИнформацияОСтатусах.СтатусыНаправленийЗначенийСвойств Цикл
							Если НаправленияСделок.Найти(ТекНаправления.ИдНаправления, "ИдНаправления") = Неопределено тогда
								НовоеНаправление = НаправленияСделок.Добавить();
								НовоеНаправление.ИдНаправления 	= ТекНаправления.ИдНаправления;
								НовоеНаправление.Направление 	= ТекНаправления.НазваниеНаправления;
								НовоеНаправление.ВидЗаказа 		= ВидЗаказа;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					Если ИнформацияОСтатусах.Свойство("СтатусыНаправленийСостояний") тогда
						
						ИнформацияОСтатусах.СтатусыНаправленийСостояний.Колонки.Добавить("НеЗагружать", ОписаниеТиповБулево);
						ИнформацияОСтатусах.СтатусыНаправленийСостояний.Колонки.Добавить("ВидЗаказа");
						
						Для Каждого ТекНаправления из ИнформацияОСтатусах.СтатусыНаправленийСостояний Цикл
							Если НаправленияСделок.Найти(ТекНаправления.ИдНаправления, "ИдНаправления") = Неопределено тогда
								НовоеНаправление = НаправленияСделок.Добавить();
								НовоеНаправление.ИдНаправления 	= ТекНаправления.ИдНаправления;
								НовоеНаправление.Направление 	= ТекНаправления.НазваниеНаправления;
								НовоеНаправление.ВидЗаказа 		= ВидЗаказа;
							КонецЕсли;
						КонецЦикла;
						
						
					КонецЕсли;
					
					Если ИнформацияОСтатусах.Свойство("СтатусыНаправленийСтатусов") тогда
						
						ИнформацияОСтатусах.СтатусыНаправленийСтатусов.Колонки.Добавить("НеЗагружать", ОписаниеТиповБулево);	
						ИнформацияОСтатусах.СтатусыНаправленийСтатусов.Колонки.Добавить("ВидЗаказа");	
						
						Для Каждого ТекНаправления из ИнформацияОСтатусах.СтатусыНаправленийСтатусов Цикл
							Если НаправленияСделок.Найти(ТекНаправления.ИдНаправления, "ИдНаправления") = Неопределено тогда
								НовоеНаправление = НаправленияСделок.Добавить();
								НовоеНаправление.ИдНаправления 	= ТекНаправления.ИдНаправления;
								НовоеНаправление.Направление 	= ТекНаправления.НазваниеНаправления;
								НовоеНаправление.ВидЗаказа 		= ВидЗаказа;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
					ИнформацияОСтатусах.Вставить("НаправленияСделок", НаправленияСделок);
					
					Если ИнформацияОСтатусах.Свойство("НаправленияСделок") тогда
						ИнформацияОСтатусах.НаправленияСделок = НаправленияСделок;
					Иначе
						ИнформацияОСтатусах.Вставить("НаправленияСделок", НаправленияСделок);
					КонецЕсли;
					
				КонецЕсли;
				
				НастройиСинхронизацииСделокНовые.Вставить("ИнформацияОСтатусах", ИнформацияОСтатусах);	
				
			КонецЕсли;
			
		КонецЕсли;	

#КонецОбласти		

		
#Область Счета

		Если НастройкиОбмена.Свойство("НастройкиСинхронизацииСчетов") тогда
			
			НастройиСинхронизацииСчетовСтарые = НастройкиОбмена.НастройкиСинхронизацииСчетов;
			НастройиСинхронизацииСчетовНовые	= НастройкиСинхронизацииПоУмолчанию.НастройкиСинхронизацииСчетов;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ВыгружатьПользовательскиеПоляСчетов") И НастройиСинхронизацииСчетовНовые.Свойство("ВыгружатьПользовательскиеПоляСчетов") тогда
				НастройиСинхронизацииСчетовНовые.ВыгружатьПользовательскиеПоляСчетов = НастройиСинхронизацииСчетовСтарые.ВыгружатьПользовательскиеПоляСчетов;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ЗагружатьПользовательскиеПоляСчетов") И НастройиСинхронизацииСчетовНовые.Свойство("ЗагружатьПользовательскиеПоляСчетов") тогда
				НастройиСинхронизацииСчетовНовые.ЗагружатьПользовательскиеПоляСчетов = НастройиСинхронизацииСчетовСтарые.ЗагружатьПользовательскиеПоляСчетов;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ВыгружатьСчета") И НастройиСинхронизацииСчетовНовые.Свойство("ВыгружатьСчета") тогда
				НастройиСинхронизацииСчетовНовые.ВыгружатьСчета = НастройиСинхронизацииСчетовСтарые.ВыгружатьСчета;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ЗагружатьСчета") И НастройиСинхронизацииСчетовНовые.Свойство("ЗагружатьСчета") тогда
				НастройиСинхронизацииСчетовНовые.ЗагружатьСчета = НастройиСинхронизацииСчетовСтарые.ЗагружатьСчета;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ДатаНачалаВыгрузкиСчетов") И НастройиСинхронизацииСчетовНовые.Свойство("ДатаНачалаВыгрузкиСчетов") тогда
				НастройиСинхронизацииСчетовНовые.ДатаНачалаВыгрузкиСчетов = НастройиСинхронизацииСчетовСтарые.ДатаНачалаВыгрузкиСчетов;
				НастройиСинхронизацииСчетовНовые.ДатаНачалаЗагрузкиСчетов = НастройиСинхронизацииСчетовСтарые.ДатаНачалаВыгрузкиСчетов;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ОбновлятьСчета") И НастройиСинхронизацииСчетовНовые.Свойство("ОбновлятьСчета") тогда
				НастройиСинхронизацииСчетовНовые.ОбновлятьСчета = НастройиСинхронизацииСчетовСтарые.ОбновлятьСчета;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("РежимЗаписиДокумента") И НастройиСинхронизацииСчетовНовые.Свойство("РежимЗаписиДокумента") тогда
				НастройиСинхронизацииСчетовНовые.РежимЗаписиДокумента = НастройиСинхронизацииСчетовСтарые.РежимЗаписиДокумента;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ИсточникДатыДокумента") И НастройиСинхронизацииСчетовНовые.Свойство("ИсточникДатыДокумента") тогда
				НастройиСинхронизацииСчетовНовые.ИсточникДатыДокумента = НастройиСинхронизацииСчетовСтарые.ИсточникДатыДокумента;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ИсточникНомераДокумента") И НастройиСинхронизацииСчетовНовые.Свойство("ИсточникНомераДокумента") тогда
				НастройиСинхронизацииСчетовНовые.ИсточникНомераДокумента = НастройиСинхронизацииСчетовСтарые.ИсточникНомераДокумента;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ПечатныеФормыСчетов") И НастройиСинхронизацииСчетовНовые.Свойство("ПечатныеФормыСчетов") тогда
				НастройиСинхронизацииСчетовНовые.ПечатныеФормыСчетов = НастройиСинхронизацииСчетовСтарые.ПечатныеФормыСчетов;
			КонецЕсли;
			
			Если НастройиСинхронизацииСчетовСтарые.Свойство("Подразделение") И НастройиСинхронизацииСчетовНовые.Свойство("Подразделение") тогда
				НастройиСинхронизацииСчетовНовые.Подразделение = НастройиСинхронизацииСчетовСтарые.Подразделение;
			КонецЕсли;
	
			Если НастройиСинхронизацииСчетовСтарые.Свойство("ИнформацияОСтатусах") тогда
				
				ИнформацияОСтатусах = НастройиСинхронизацииСчетовСтарые.ИнформацияОСтатусах;				
				
				Если ТипЗнч(ИнформацияОСтатусах) = Тип("Структура") тогда
					
					Если ИнформацияОСтатусах.Свойство("СоответствияЗначенийСвойств") тогда
						ИнформацияОСтатусах.СоответствияЗначенийСвойств.Колонки.Добавить("НеЗагружать", ОписаниеТиповБулево);	
					КонецЕсли;
					
					Если ИнформацияОСтатусах.Свойство("СоответствияСтатусов") тогда
						ИнформацияОСтатусах.СоответствияСтатусов.Колонки.Добавить("НеЗагружать", ОписаниеТиповБулево);	
					КонецЕсли;
					
				КонецЕсли;
				
				НастройиСинхронизацииСчетовНовые.Вставить("ИнформацияОСтатусах", ИнформацияОСтатусах);	
				
			КонецЕсли;
	
		КонецЕсли;	

#КонецОбласти		

	КонецЕсли;
	
	НоваяНастройка.НастройкиСинхронизации = Новый ХранилищеЗначения(НастройкиСинхронизацииПоУмолчанию);
	
	НоваяНастройка.Записать();	
	
	НастройкаСинхронизации = НоваяНастройка.Ссылка;

	// БВ
	Сообщить(Нстр("ru = 'Начало переноса идентификаторов'; uk = 'Початок  перенесення ідентифікаторів'"));
	//
	
	Токен = РегистрыСведений.Б24_ТокеныОбмена.ПолучитьПоследнее();
	
	НоваяЗапись 						= РегистрыСведений.Б24_ТокеныОбмена.СоздатьМенеджерЗаписи();
	НоваяЗапись.НастройкаСинхронизации 	= НастройкаСинхронизации;
	НоваяЗапись.Период					= ТекущаяДата();
	НоваяЗапись.Токен					= Токен.Токен;
	НоваяЗапись.Записать();	
	
	
	ОбщиеНастройки = Неопределено;
	Если Метаданные.ОбщиеМодули.Найти("Б24_СинхронизацияКлиентСервер") <> Неопределено тогда
		Выполнить("ОбщиеНастройки =  Б24_СинхронизацияКлиентСервер.СформироватьБазовуюСтруктуруНастроек(НастройкаСинхронизации);");
	КонецЕсли;
	
	Если ОбщиеНастройки = Неопределено тогда
		// БВ
		Сообщить(Нстр("ru = 'Не удалось подключиться к Битрикс24'; uk = 'Не вдалось підключитися до Бітрікс24'"));
		ТекстСообщения = Нстр("ru = 'Не удалось перенести идентификаторы объектов. Скорее всего в старом модуле некорректный токен.'" + 
							 ";uk = 'Не вдалось перенести ідентифікатори об'єктів. Скоріш за все в старому модулі некоректний токен.'");
		Сообщить(ТекстСообщения);
		//
		
		Возврат;
	КонецЕсли;
	Портал = ОбщиеНастройки.НастройкиПодключения.Сервер;
	
	НоваяНастройка.Портал = Портал;
	НоваяНастройка.Записать();
	
	Выборка = РегистрыСведений.Б24_ИдентификаторыОбъектов.Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Портал) тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.Б24_ИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
		
		НоваяЗапись.Портал 						= Портал; 		
		НоваяЗапись.Объект 						= Выборка.Объект;
		
		НоваяЗапись.Идентификатор 				= Выборка.Идентификатор;
		НоваяЗапись.ДополнительныйИдентификатор = Выборка.ДополнительныйИдентификатор;
		
		
		Если Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.Товар тогда
			
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.Товар;
			
			Попытка
				Если ЗначениеЗаполнено(Выборка.ПодчиненныйОбъект) тогда
					НоваяЗапись.ПодчиненныйОбъект 	= Выборка.ПодчиненныйОбъект;
				Иначе
					НоваяЗапись.ПодчиненныйОбъект 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.КартинкаФайлТовара тогда
			
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.КартинкаФайлТовара;
				
			Попытка
				Если ЗначениеЗаполнено(Выборка.ПодчиненныйОбъект) тогда
					НоваяЗапись.ПодчиненныйОбъект 	= Выборка.ПодчиненныйОбъект;
				Иначе
					НоваяЗапись.ПодчиненныйОбъект 	= Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
				КонецЕсли;
			Исключение
			КонецПопытки;
				
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.СвойствоТовара тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.СвойствоТовара;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ГруппаТовара тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ГруппаТовара;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.Счет тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.Счет;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.РеквизитыСчета тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.РеквизитыСчета;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.Компания тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.Компания;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.Контакт тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.Контакт;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.Реквизит тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.Реквизит;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ЮрАдресРеквизита тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ЮрАдресРеквизита;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ФактАдресРеквизита тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ФактАдресРеквизита;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.БанковскийСчетРеквизита тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.БанковскийСчетРеквизита;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ЕдиницаИзмерения тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ЕдиницаИзмерения;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ЗначениеСвойстваТовара тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ЗначениеСвойстваТовара;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.Сделка тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.Сделка;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.РеквизитыСделки тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.РеквизитыСделки;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ТоварыСделки тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ТоварыСделки;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.СвойствоСчета тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.СвойствоСчета;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.СвойствоСделки тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.СвойствоСделки;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.СвойствоКомпании тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.СвойствоКомпании;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.СвойствоКонтакта тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.СвойствоКонтакта;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ЗначениеСвойстваКомпании тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ЗначениеСвойстваКомпании;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ЗначениеСвойстваКонтакта тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ЗначениеСвойстваКонтакта;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ЗначениеСвойстваСделки тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ЗначениеСвойстваСделки;
		ИначеЕсли Выборка.ТипДанных = ТипыДанныхДляОбменаСПорталомСтарые.ЗначениеСвойстваСчета тогда
			НоваяЗапись.ТипДанных  = ТипыДанныхДляОбменаСПорталомНовые.ЗначениеСвойстваСчета;
		КонецЕсли;		
		
		НоваяЗапись.Записать();	
		
	КонецЦикла;
	
	// БВ
	Сообщить(Нстр("ru = 'Перенос идентификаторов завершен'; uk = 'Перенесення ідентифікаторів завершено'"));
	//
	
	Попытка
		НастройкиОбмена 	= Константы.Б24_НастройкиОбмена.Получить().Получить();
		НастройкиОбмена.СпособСинхронизацииДанных 	= "Только ручной режим"; 
		НастройкиОбмена.СинхронизацияКонтрагентов 	= Ложь; 
		НастройкиОбмена.СинхронизацияТоваров 		= Ложь; 
		НастройкиОбмена.СинхронизацияСделок 		= Ложь; 
		
		Константы.Б24_НастройкиОбмена.Установить(новый ХранилищеЗначения(НастройкиОбмена));
	Исключение
	КонецПопытки;

	ОбновитьПовторноИспользуемыеЗначения();
	
	// БВ
	Сообщить(Нстр("ru = 'Перенос данных завершен.'; uk = 'Перенесення даних завершено'"));
	//
	
КонецПроцедуры

#КонецОбласти
